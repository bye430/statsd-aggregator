#!/bin/bash

# chkconfig: 345 99 1
# description: statsd-aggregator collects multiple messages and sends them in larger UDP packages to statsd

set -e -u

# readlink is needed in case script is run via symlinks. By using readlink -f we would know name of original file.
SERVICE=$(basename $(readlink -f $0))
PID_FILE=/var/run/${SERVICE}.pid
CMD=/usr/bin/${SERVICE}
CONF_FILE="/etc/${SERVICE}.conf"
CMD_OPTIONS="$CONF_FILE"

[ -r "$CONF_FILE" ] || {
    echo "Can't find config file \"$CONF_FILE\""
    exit 1
}

lock_acquired=false

get_lock() {
    touch ${PID_FILE}.test || {
        echo "Can't create ${PID_FILE}"
        exit 1
    }
    rm -f ${PID_FILE}.test
    while true; do
        set -- $(LC_ALL=C ls -il ${PID_FILE} 2>/dev/null)
        if [ -z "${1:-}" ] ; then
            ln -s $$ $PID_FILE && lock_acquired=true && return
        else
            ps ${12} >/dev/null 2>&1 && return
            find $PID_FILE -inum ${1} -exec rm -f {} \;
        fi
    done
}

start() {
    echo -n "Starting $CMD ..."
    ! $lock_acquired && echo "already started" && return
    $CMD $CMD_OPTIONS 0<&- 2>&1 | logger -i -t ${SERVICE} >/dev/null 2>&1 &
    ln -nsf $(jobs -p) ${PID_FILE} && echo " done" && disown && return 0
    echo "failed"
    return 1
}

stop() {
    echo -n "Stopping $CMD ..."
    $lock_acquired && echo "already stopped" && return
    pid=$(readlink $PID_FILE)
    for sig in KILL TERM ; do
        kill -${sig} $pid || true # killing already terminated process should not cause error
        for ((i = 0; i < 30; i++)) {
            ps $pid >/dev/null 2>&1 && echo -n "." && sleep 1 && continue
            get_lock
            echo " done"
            return 0
        }
   done
   echo "failed"
   return 1
}

status() {
    exit_code=0
    not=''
    $lock_acquired && exit_code=1 && not='not '
    echo "$CMD is ${not}running"
    exit $exit_code
}

get_lock
case "${1:-}" in
    start)      start ;;
    stop)       stop ;;
    restart)    stop && start ;;
    status)     status ;;
    *)          echo "Usage: $0 start|stop|restart|status" && exit 1 ;;
esac
